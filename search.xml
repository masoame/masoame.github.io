<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法笔记</title>
      <link href="/2023/11/28/algorithm/"/>
      <url>/2023/11/28/algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j, temp;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                                temp = arr[j];</span><br><span class="line">                                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> STL </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE文件认识</title>
      <link href="/2023/11/24/PE-file/"/>
      <url>/2023/11/24/PE-file/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件。<br>PE文件一般有以下区块：<br> .text : 是在编译或者汇编结束时产生的一种区块，是指令的代码<br> .rdata ：是运行时的只读数据，也就是所说的const常量<br> .data:初始化的数据块，也就是全局变量<br> .idata：包含其他外来dll的函数以及数据信息，即输入表<br> .rsrc：包含全部的资源，如图标、菜单、位图等等 </p><p><img src="https://masoame.github.io/img/PE-file/PE_ALL.png" alt="PE_ALL"></p><h2 id="二、DOS头"><a href="#二、DOS头" class="headerlink" title="二、DOS头"></a>二、DOS头</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_file_header">_IMAGE_DOS_HEADER</a>结构体</p><p><font color=green>e_magic: 为固定开头0x5A4D</font></p><p><font color=green>e_lfanew: 用于定位NT头(模块句柄+e_lfanew)</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span></span><br><span class="line">     WORD e_magic;</span><br><span class="line">     WORD e_cblp;  <span class="comment">//文件最后页的字节数</span></span><br><span class="line">     WORD e_cp;    <span class="comment">//文件页数</span></span><br><span class="line">     WORD e_crlc;  <span class="comment">//重定义元素个数</span></span><br><span class="line">     WORD e_cparhdr;  <span class="comment">//头部尺寸，以段落为单位</span></span><br><span class="line">     WORD e_minalloc; <span class="comment">//所需的最小附加段</span></span><br><span class="line">     WORD e_maxalloc; <span class="comment">//所需的最大附加段</span></span><br><span class="line">     WORD e_ss;    <span class="comment">//初始的SS值（相对偏移量）</span></span><br><span class="line">     WORD e_sp;    <span class="comment">//初始的SP值</span></span><br><span class="line">     WORD e_csum;  <span class="comment">//校验和</span></span><br><span class="line">     WORD e_ip;    <span class="comment">//初始的IP值</span></span><br><span class="line">     WORD e_cs;    <span class="comment">//初始的CS值（相对偏移量）</span></span><br><span class="line">     WORD e_lfarlc; <span class="comment">//重分配表文件地址</span></span><br><span class="line">     WORD e_ovno;   <span class="comment">//覆盖号</span></span><br><span class="line">     WORD e_res[<span class="number">4</span>]; <span class="comment">//保留字</span></span><br><span class="line">     WORD e_oemid;  <span class="comment">//OEM标识符（相对e_oeminfo）</span></span><br><span class="line">     WORD e_oeminfo;  <span class="comment">//OEM信息</span></span><br><span class="line">     WORD e_res2[<span class="number">10</span>]; <span class="comment">//保留字</span></span><br><span class="line">     LONG e_lfanew;</span><br><span class="line">   &#125; IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><h2 id="三、NT头"><a href="#三、NT头" class="headerlink" title="三、NT头"></a>三、NT头</h2><p><font color=Red><strong>注意NT头在32和64位执行文件的结构体不同(IMAGE_OPTIONAL_HEADER结构体不同)</strong></font></p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_nt_headers64">IMAGE_NT_HEADERS</a>结构体</p><p><font color=green><strong>Signature</strong>: 固定开头0x4550 </font></p><p><font color=green><strong>IMAGE_FILE_HEADER</strong>:  文件头(PE头)</font></p><p><font color=green><strong>IMAGE_OPTIONAL_HEADER</strong>: 可选头</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER64 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><h3 id="1、IMAGE-FILE-HEADER"><a href="#1、IMAGE-FILE-HEADER" class="headerlink" title="1、IMAGE_FILE_HEADER"></a>1、IMAGE_FILE_HEADER</h3><h3 id="2、IMAGE-OPTIONAL-HEADER"><a href="#2、IMAGE-OPTIONAL-HEADER" class="headerlink" title="2、IMAGE_OPTIONAL_HEADER"></a>2、IMAGE_OPTIONAL_HEADER</h3><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_optional_header32">IMAGE_OPTIONAL_HEADER32 结构</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_optional_header64">IMAGE_OPTIONAL_HEADER64 结构</a></p><p><font color="green"><strong>DataDirectory</strong></font>: <strong>为IMAGE_DATA_DIRECTORY数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure><p><font color="green"><strong>VirtualAddress</strong></font>: <strong>指向对应数据目录（参考以下宏定义）</strong></p><h4 id="IMAGE-DATA-DIRECTORY-表示数据目录"><a href="#IMAGE-DATA-DIRECTORY-表示数据目录" class="headerlink" title="IMAGE_DATA_DIRECTORY(表示数据目录)"></a>IMAGE_DATA_DIRECTORY(表示数据目录)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Directory Entries</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="comment">// Export Directory(导出表)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="comment">// Import Directory(导入表)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="comment">// Resource Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="comment">// Exception Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="comment">// Security Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="comment">// Base Relocation Table</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="comment">// Debug Directory</span></span></span><br><span class="line"><span class="comment">//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (X86 usage)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   <span class="comment">// Architecture Specific Data</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   <span class="comment">// RVA of GP</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS             9   <span class="comment">// TLS Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   <span class="comment">// Load Configuration Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   <span class="comment">// Bound Import Directory in headers</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12   <span class="comment">// Import Address Table</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   <span class="comment">// Delay Load Import Descriptors</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   <span class="comment">// COM Runtime descriptor</span></span></span><br></pre></td></tr></table></figure><h5 id="1、导出表（dll相关）"><a href="#1、导出表（dll相关）" class="headerlink" title="1、导出表（dll相关）"></a>1、导出表（dll相关）</h5><p>IMAGE_EXPORT_DIRECTORY</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>这个结构体重点了解<strong>AddressOfFunctions，AddressOfNames，AddressOfNameOrdinals</strong></p><p><font color="green"><strong>AddressOfFunctions</strong></font>: 指向函数<strong>地址表</strong>的RVA</p><p><font color="green"><strong>AddressOfNames</strong></font>:  指向导出函数<strong>名称表</strong>的RVA</p><p><font color="green"><strong>AddressOfNameOrdinals</strong></font>: 指向函数<strong>序号表</strong>的RVA</p><p><font color="red"><strong>！！注意</strong></font>函数**<u>序号表</u><strong>大小与</strong><u>函数名称表</u><strong>一定<font color="red"><strong>相同</strong></font>而与</strong><u>函数表</u>**的大小<font color="red"><strong>不一定相同</strong></font></p><p><img src="https://masoame.github.io/img/PE-file/ExportHeader.jpg" alt="导出表具体数据指向图"></p><h5 id="2、导入表"><a href="#2、导入表" class="headerlink" title="2、导入表"></a>2、导入表</h5><p>IMAGE_IMPORT_DESCRIPTOR</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 0 if not bound,</span></span><br><span class="line">                                            <span class="comment">// -1 if bound, and real date\time stamp</span></span><br><span class="line">                                            <span class="comment">//     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></span><br><span class="line">                                            <span class="comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// RVA to IAT (if bound this IAT has actual addresses)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>让我们注意一下这个DUMMYUNIONNAME<strong>联合体</strong>此为一个四字节大小</p><p><strong>IMAGE_THUNK_DATA</strong>用于接收<strong>IAT，INT表的元素</strong></p><p><font color="green"><strong>FirstThunk</strong></font>: 指向函数**地址表(IAT)**的RVA</p><p><font color="green"><strong>DUMMYUNIONNAME</strong></font>: 分<strong>两种</strong>情况（判断可以使用宏 <font color=purple><strong>IMAGE_SNAP_BY_ORDINAL</strong></font>,提取使用宏<font color=purple><strong>IMAGE_ORDINAL</strong></font>&gt;）</p><p>①当数据最高位为<strong>1</strong>表示按<strong>序号</strong>导入，低16位即为序号</p><p>②当数据最高位为<strong>0</strong>表示按<strong>名字</strong>导入，<strong>OriginalFirstThunk</strong>为定位<strong>IMAGE_IMPORT_BY_NAME结构体</strong>的定位RVA</p><p><img src="https://masoame.github.io/img/PE-file/ImportHeader.png" alt="导入表具体数据指向图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> c/c++ </tag>
            
            <tag> PE文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++元编程笔记</title>
      <link href="/2023/11/24/c++_template/"/>
      <url>/2023/11/24/c++_template/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模板学习"><a href="#模板学习" class="headerlink" title="模板学习"></a>模板学习</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终止递归</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Types&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T first, Types ... rest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first + <span class="built_in">sum</span>&lt;T&gt;(rest...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">8</span> , <span class="number">7</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实用模板"><a href="#实用模板" class="headerlink" title="实用模板"></a>实用模板</h1><h2 id="强转为对应指针"><a href="#强转为对应指针" class="headerlink" title="强转为对应指针"></a>强转为对应指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PermissivePointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">operator</span> T* () &#123; <span class="keyword">return</span> (T*)p; &#125;</span><br><span class="line"><span class="type">void</span>* p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="包装编译期函数常量"><a href="#包装编译期函数常量" class="headerlink" title="包装编译期函数常量"></a>包装编译期函数常量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> f&gt;</span><br><span class="line"><span class="keyword">using</span> Functor = std::integral_constant&lt;<span class="keyword">decltype</span>(f), f&gt;;</span><br></pre></td></tr></table></figure><h2 id="通过智能指针管理句柄"><a href="#通过智能指针管理句柄" class="headerlink" title="通过智能指针管理句柄"></a>通过智能指针管理句柄</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装的CloseHandle关闭句柄函数作为默认类型参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> HandleCloser = Functor&lt;CloseHandle&gt; &gt;</span><br><span class="line"><span class="keyword">class</span> AutoHandle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">AutoHandle</span>(HANDLE h) : <span class="built_in">h</span>(h) &#123;&#125;</span><br><span class="line"><span class="comment">//类型转换为句柄直接返回指针的值</span></span><br><span class="line"><span class="keyword">operator</span> <span class="built_in">HANDLE</span>() &#123; <span class="keyword">return</span> h.<span class="built_in">get</span>(); &#125;</span><br><span class="line"><span class="comment">//取地址时直接返回指针类的地址(检查为空指针直接报错,MSVC智能指针与void*大小相同其他平台未测试)</span></span><br><span class="line">PHANDLE <span class="keyword">operator</span>&amp;() &#123; <span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(*<span class="keyword">this</span>) == <span class="built_in">sizeof</span>(HANDLE)); <span class="built_in">assert</span>(h); <span class="keyword">return</span> (PHANDLE)<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="comment">//类型转换为bool值时</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> h.<span class="built_in">get</span>() != <span class="literal">NULL</span> &amp;&amp; h.<span class="built_in">get</span>() != INVALID_HANDLE_VALUE; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//自定义覆盖default_delete</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HandleCleaner</span> &#123; <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">void</span>* h)</span> </span>&#123; <span class="keyword">if</span> (h != INVALID_HANDLE_VALUE) <span class="built_in">HandleCloser</span>()(PermissivePointer&#123; h &#125;); &#125; &#125;;</span><br><span class="line"><span class="comment">//智能指针管理句柄的释放</span></span><br><span class="line">std::unique_ptr&lt;<span class="type">void</span>, HandleCleaner&gt; h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="检测返回值为检测值是否相同"><a href="#检测返回值为检测值是否相同" class="headerlink" title="检测返回值为检测值是否相同"></a>检测返回值为检测值是否相同</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NDEBUG</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CkValue</span></span><br><span class="line">&#123;</span><br><span class="line">    CkValue* <span class="keyword">operator</span> &amp;() = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* message;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty&gt;</span></span><br><span class="line"><span class="function">    <span class="title">CkValue</span><span class="params">(Ty _val, <span class="type">long</span> <span class="type">long</span> errorcode = <span class="number">0</span>)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* CkValue::message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CkValue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">    CkValue* <span class="keyword">operator</span> &amp;() = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* message;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Ty&gt;</span></span><br><span class="line"><span class="function">    <span class="title">CkValue</span><span class="params">(Ty _val, <span class="type">long</span> <span class="type">long</span> errorcode = <span class="number">0</span>)</span> : val((long long)_val) &#123;</span> <span class="keyword">if</span> (val == errorcode) &#123; std::cout &lt;&lt; message &lt;&lt; std::endl; CkValue::message = <span class="string">&quot;&quot;</span>; std::<span class="built_in">abort</span>(); &#125; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* CkValue::message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ 封装 linux epoll</title>
      <link href="/2023/11/24/linux-epoll-c/"/>
      <url>/2023/11/24/linux-epoll-c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> Linux </tag>
            
            <tag> epoll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文档</title>
      <link href="/2023/11/22/demo/"/>
      <url>/2023/11/22/demo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><a href="https://masoame.github.io/">项目地址</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://masoame.github.io/img/avatar.jpg" alt="avatar"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
