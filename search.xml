<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PE文件认识</title>
      <link href="/2023/11/24/PE-file/"/>
      <url>/2023/11/24/PE-file/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件。<br>PE文件一般有以下区块：<br> .text : 是在编译或者汇编结束时产生的一种区块，是指令的代码<br> .rdata ：是运行时的只读数据，也就是所说的const常量<br> .data:初始化的数据块，也就是全局变量<br> .idata：包含其他外来dll的函数以及数据信息，即输入表<br> .rsrc：包含全部的资源，如图标、菜单、位图等等 </p><p><img src="https://masoame.github.io/img/PE-file/PE_ALL.png" alt="ExportHeader"></p><h2 id="二、DOS头"><a href="#二、DOS头" class="headerlink" title="二、DOS头"></a>二、DOS头</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_file_header">_IMAGE_DOS_HEADER</a>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span></span><br><span class="line">     WORD e_magic; <span class="comment">//魔术数字</span></span><br><span class="line">     WORD e_cblp;  <span class="comment">//文件最后页的字节数</span></span><br><span class="line">     WORD e_cp;    <span class="comment">//文件页数</span></span><br><span class="line">     WORD e_crlc;  <span class="comment">//重定义元素个数</span></span><br><span class="line">     WORD e_cparhdr;  <span class="comment">//头部尺寸，以段落为单位</span></span><br><span class="line">     WORD e_minalloc; <span class="comment">//所需的最小附加段</span></span><br><span class="line">     WORD e_maxalloc; <span class="comment">//所需的最大附加段</span></span><br><span class="line">     WORD e_ss;    <span class="comment">//初始的SS值（相对偏移量）</span></span><br><span class="line">     WORD e_sp;    <span class="comment">//初始的SP值</span></span><br><span class="line">     WORD e_csum;  <span class="comment">//校验和</span></span><br><span class="line">     WORD e_ip;    <span class="comment">//初始的IP值</span></span><br><span class="line">     WORD e_cs;    <span class="comment">//初始的CS值（相对偏移量）</span></span><br><span class="line">     WORD e_lfarlc; <span class="comment">//重分配表文件地址</span></span><br><span class="line">     WORD e_ovno;   <span class="comment">//覆盖号</span></span><br><span class="line">     WORD e_res[<span class="number">4</span>]; <span class="comment">//保留字</span></span><br><span class="line">     WORD e_oemid;  <span class="comment">//OEM标识符（相对e_oeminfo）</span></span><br><span class="line">     WORD e_oeminfo;  <span class="comment">//OEM信息</span></span><br><span class="line">     WORD e_res2[<span class="number">10</span>]; <span class="comment">//保留字</span></span><br><span class="line">     LONG e_lfanew;   <span class="comment">//新exe头部的文件位置</span></span><br><span class="line">   &#125; IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><h2 id="三、NT头"><a href="#三、NT头" class="headerlink" title="三、NT头"></a>三、NT头</h2><p><font color=Red><strong>注意NT头在32和64位执行文件的结构体不同(IMAGE_OPTIONAL_HEADER32结构体不同)</strong></font></p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-image_nt_headers64">IMAGE_NT_HEADERS</a>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER64 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><h2 id="四、表"><a href="#四、表" class="headerlink" title="四、表"></a>四、表</h2><h3 id="1、导出表（dll相关）"><a href="#1、导出表（dll相关）" class="headerlink" title="1、导出表（dll相关）"></a>1、导出表（dll相关）</h3><p>_IMAGE_EXPORT_DIRECTORY</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p><img src="https://masoame.github.io/img/PE-file/ExportHeader.jpg" alt="PE_ALL"></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> c/c++ </tag>
            
            <tag> PE文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++元编程笔记</title>
      <link href="/2023/11/24/c++_template/"/>
      <url>/2023/11/24/c++_template/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模板学习"><a href="#模板学习" class="headerlink" title="模板学习"></a>模板学习</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终止递归</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Types&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T first, Types ... rest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first + <span class="built_in">sum</span>&lt;T&gt;(rest...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">8</span> , <span class="number">7</span>) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实用模板"><a href="#实用模板" class="headerlink" title="实用模板"></a>实用模板</h1><h2 id="强转为对应指针"><a href="#强转为对应指针" class="headerlink" title="强转为对应指针"></a>强转为对应指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PermissivePointer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">operator</span> T* () &#123; <span class="keyword">return</span> (T*)p; &#125;</span><br><span class="line"><span class="type">void</span>* p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="包装编译期函数常量"><a href="#包装编译期函数常量" class="headerlink" title="包装编译期函数常量"></a>包装编译期函数常量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> f&gt;</span><br><span class="line"><span class="keyword">using</span> Functor = std::integral_constant&lt;<span class="keyword">decltype</span>(f), f&gt;;</span><br></pre></td></tr></table></figure><h2 id="通过智能指针管理句柄"><a href="#通过智能指针管理句柄" class="headerlink" title="通过智能指针管理句柄"></a>通过智能指针管理句柄</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装的CloseHandle关闭句柄函数作为默认类型参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> HandleCloser = Functor&lt;CloseHandle&gt; &gt;</span><br><span class="line"><span class="keyword">class</span> AutoHandle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">AutoHandle</span>(HANDLE h) : <span class="built_in">h</span>(h) &#123;&#125;</span><br><span class="line"><span class="comment">//类型转换为句柄直接返回指针的值</span></span><br><span class="line"><span class="keyword">operator</span> <span class="built_in">HANDLE</span>() &#123; <span class="keyword">return</span> h.<span class="built_in">get</span>(); &#125;</span><br><span class="line"><span class="comment">//取地址时直接返回指针类的地址(检查为空指针直接报错,MSVC智能指针与void*大小相同其他平台未测试)</span></span><br><span class="line">PHANDLE <span class="keyword">operator</span>&amp;() &#123; <span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(*<span class="keyword">this</span>) == <span class="built_in">sizeof</span>(HANDLE)); <span class="built_in">assert</span>(h); <span class="keyword">return</span> (PHANDLE)<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="comment">//类型转换为bool值时</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> h.<span class="built_in">get</span>() != <span class="literal">NULL</span> &amp;&amp; h.<span class="built_in">get</span>() != INVALID_HANDLE_VALUE; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//自定义覆盖default_delete</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HandleCleaner</span> &#123; <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">void</span>* h)</span> </span>&#123; <span class="keyword">if</span> (h != INVALID_HANDLE_VALUE) <span class="built_in">HandleCloser</span>()(PermissivePointer&#123; h &#125;); &#125; &#125;;</span><br><span class="line"><span class="comment">//智能指针管理句柄的释放</span></span><br><span class="line">std::unique_ptr&lt;<span class="type">void</span>, HandleCleaner&gt; h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ 封装 linux epoll</title>
      <link href="/2023/11/24/linux-epoll-c/"/>
      <url>/2023/11/24/linux-epoll-c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
            <tag> Linux </tag>
            
            <tag> epoll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文档</title>
      <link href="/2023/11/22/demo/"/>
      <url>/2023/11/22/demo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><a href="https://masoame.github.io/">项目地址</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://masoame.github.io/img/avatar.jpg" alt="avatar"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
